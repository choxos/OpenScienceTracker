"""
Django settings for ost_web project.

Generated by 'django-admin startproject' using Django 5.1.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-ost-dev-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ['true', '1', 'yes']

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*.railway.app', '.railway.app', 'opensciencetracker.up.railway.app', 'ost.xeradb.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Django REST Framework
    'django_filters',  # For API filtering
    'corsheaders',  # For CORS support
    'drf_spectacular',  # For API documentation
    'compressor',  # CSS/JS compression
    'tracker',  # Our main OST app
] + (['debug_toolbar'] if DEBUG else [])  # Debug toolbar for development only

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For serving static files in production
    'corsheaders.middleware.CorsMiddleware',  # Must be before CommonMiddleware
    'django.middleware.cache.UpdateCacheMiddleware',  # Must be first cache middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',  # Must be last cache middleware
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
] + (['debug_toolbar.middleware.DebugToolbarMiddleware'] if DEBUG else [])  # Debug toolbar for development

ROOT_URLCONF = 'ost_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ost_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database configuration
# Use PostgreSQL on Railway, SQLite for local development
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Production (Railway) - PostgreSQL
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Development - SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'ost_database.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
] if (BASE_DIR / 'static').exists() else []
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise static files configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Django Compressor settings for CSS/JS optimization
COMPRESS_ENABLED = not DEBUG  # Enable compression in production
COMPRESS_OFFLINE = True  # Pre-compress files during collectstatic
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',  # Minify CSS
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',  # Minify JavaScript
]

# Static file finders including compressor
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',  # For django-compressor
]

# Cache control for static files (1 year for most files)
WHITENOISE_MAX_AGE = 31536000  # 1 year

# Gzip compression
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Email configuration (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# OST specific settings
OST_VERSION = '1.0'
OST_DATA_PATH = BASE_DIR  # Path to CSV data files
OST_PAGINATION_SIZE = 25

# Caching Configuration - Redis for production, database for development
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache' if os.environ.get('REDIS_URL') else 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': os.environ.get('REDIS_URL', 'cache_table'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 50},
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        } if os.environ.get('REDIS_URL') else {},
        'TIMEOUT': 60 * 15,  # 15 minutes default
        'KEY_PREFIX': 'ost',
        'VERSION': 1,
    }
}

# Cache timeout settings
CACHE_TIMEOUTS = {
    'statistics': 60 * 30,  # 30 minutes for statistics
    'home_stats': 60 * 15,  # 15 minutes for home page stats
    'field_stats': 60 * 60,  # 1 hour for field statistics
    'journal_stats': 60 * 30,  # 30 minutes for journal stats
    'paper_count': 60 * 10,  # 10 minutes for paper counts
    'search_results': 60 * 5,  # 5 minutes for search results
}

# Logging Configuration - VPS Compatible
def get_log_file_path():
    """Get appropriate log file path based on environment"""
    # Try VPS log directory first
    vps_log_path = Path('/var/log/ost')
    if vps_log_path.exists() and os.access(vps_log_path, os.W_OK):
        return vps_log_path / 'ost.log'
    
    # Try project log directory
    project_log_path = BASE_DIR / 'logs'
    if not project_log_path.exists():
        try:
            project_log_path.mkdir(exist_ok=True)
            return project_log_path / 'ost.log'
        except (OSError, PermissionError):
            pass
    elif os.access(project_log_path, os.W_OK):
        return project_log_path / 'ost.log'
    
    # Fallback to project root (if writable)
    project_root_log = BASE_DIR / 'ost.log'
    if os.access(BASE_DIR, os.W_OK):
        return project_root_log
    
    # If all else fails, return None (will use console only)
    return None

# Determine log handlers based on environment
log_handlers = ['console']  # Always use console
log_file_path = get_log_file_path()

LOGGING_HANDLERS = {
    'console': {
        'level': 'INFO',
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
    },
}

# Add file handler only if we have a writable log path
if log_file_path:
    LOGGING_HANDLERS['file'] = {
        'level': 'INFO',
        'class': 'logging.FileHandler',
        'filename': str(log_file_path),
        'formatter': 'verbose',
    }
    log_handlers.append('file')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': LOGGING_HANDLERS,
    'loggers': {
        'tracker': {
            'handlers': log_handlers,
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

# =============================================================================
# REST FRAMEWORK CONFIGURATION
# =============================================================================

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Open access for research
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day',  # Generous rate limit for researchers
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# API Documentation Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'Open Science Tracker API',
    'DESCRIPTION': '''
    A comprehensive REST API for accessing transparency and reproducibility data 
    from medical and dental literature. This API provides programmatic access to:
    
    - **Papers**: Research papers with transparency scores and metadata
    - **Journals**: Journal information with subject classifications  
    - **Research Fields**: Broad subject categories with statistics
    
    Perfect for meta-research, bibliometric analysis, and transparency studies.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': 'Ahmad Sofi-Mahmudi',
        'email': 'ahmad.pub@gmail.com',
        'url': 'https://scholar.google.com/citations?user=gTWPaFYAAAAJ&hl=en',
    },
    'LICENSE': {
        'name': 'MIT License',
        'url': 'https://github.com/choxos/OpenScienceTracker/blob/main/LICENSE',
    },
    'EXTERNAL_DOCS': {
        'description': 'GitHub Repository',
        'url': 'https://github.com/choxos/OpenScienceTracker',
    },
}

# CORS Configuration for API access
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for open research access
CORS_ALLOW_CREDENTIALS = False

# Additional security headers for API
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
