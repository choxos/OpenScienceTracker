# Generated by Django 5.1.11 on 2025-07-22 16:43

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Journal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nlm_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                ("title_abbreviation", models.CharField(db_index=True, max_length=200)),
                ("title_full", models.TextField()),
                ("authors", models.TextField(blank=True, null=True)),
                ("publication_start_year", models.IntegerField(blank=True, null=True)),
                ("publication_end_year", models.IntegerField(blank=True, null=True)),
                ("frequency", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "country",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True, db_index=True, max_length=500, null=True
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "issn_electronic",
                    models.CharField(blank=True, max_length=9, null=True),
                ),
                ("issn_print", models.CharField(blank=True, max_length=9, null=True)),
                ("issn_linking", models.CharField(blank=True, max_length=9, null=True)),
                (
                    "indexing_status",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "broad_subject_terms",
                    models.TextField(help_text="Semicolon-separated subject terms"),
                ),
                ("subject_term_count", models.IntegerField(default=1)),
                ("mesh_terms", models.TextField(blank=True, null=True)),
                ("lccn", models.CharField(blank=True, max_length=50, null=True)),
                ("electronic_links", models.URLField(blank=True, null=True)),
                (
                    "publication_types",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["title_abbreviation"],
                "indexes": [
                    models.Index(
                        fields=["country"], name="tracker_jou_country_888804_idx"
                    ),
                    models.Index(
                        fields=["publisher"], name="tracker_jou_publish_665cdf_idx"
                    ),
                    models.Index(
                        fields=["publication_start_year"],
                        name="tracker_jou_publica_fdb2ac_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ResearchField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("total_journals", models.IntegerField(default=0)),
                ("total_papers", models.IntegerField(default=0)),
                ("avg_transparency_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_field",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tracker.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "institution",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("is_researcher", models.BooleanField(default=True)),
                (
                    "orcid",
                    models.CharField(
                        blank=True,
                        help_text="ORCID ID (e.g., 0000-0000-0000-0000)",
                        max_length=19,
                        null=True,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "preferred_fields",
                    models.ManyToManyField(
                        blank=True,
                        related_name="preferred_by_users",
                        to="tracker.researchfield",
                    ),
                ),
                (
                    "research_interests",
                    models.ManyToManyField(blank=True, to="tracker.researchfield"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pmid", models.CharField(db_index=True, max_length=20, unique=True)),
                ("pmcid", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "doi",
                    models.CharField(
                        blank=True, db_index=True, max_length=200, null=True
                    ),
                ),
                ("title", models.TextField()),
                ("author_string", models.TextField()),
                ("journal_title", models.CharField(db_index=True, max_length=200)),
                ("pub_year", models.IntegerField(db_index=True)),
                (
                    "pub_year_modified",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("first_publication_date", models.DateField(blank=True, null=True)),
                ("year_first_pub", models.IntegerField(blank=True, null=True)),
                ("month_first_pub", models.IntegerField(blank=True, null=True)),
                ("journal_issn", models.CharField(blank=True, max_length=9, null=True)),
                (
                    "jif2020",
                    models.FloatField(
                        blank=True, help_text="Journal Impact Factor 2020", null=True
                    ),
                ),
                (
                    "scimago_publisher",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "is_open_data",
                    models.BooleanField(
                        default=False, help_text="Data sharing available"
                    ),
                ),
                (
                    "is_open_code",
                    models.BooleanField(
                        default=False, help_text="Code sharing available"
                    ),
                ),
                (
                    "is_coi_pred",
                    models.BooleanField(
                        default=False, help_text="Conflict of interest disclosure"
                    ),
                ),
                (
                    "is_fund_pred",
                    models.BooleanField(default=False, help_text="Funding disclosure"),
                ),
                (
                    "is_register_pred",
                    models.BooleanField(
                        default=False, help_text="Protocol registration"
                    ),
                ),
                (
                    "is_replication",
                    models.BooleanField(
                        blank=True, help_text="Replication component", null=True
                    ),
                ),
                (
                    "is_novelty",
                    models.BooleanField(
                        blank=True, help_text="Novelty statement", null=True
                    ),
                ),
                (
                    "disc_data",
                    models.BooleanField(
                        default=False, help_text="Data disclosure statement found"
                    ),
                ),
                (
                    "disc_code",
                    models.BooleanField(
                        default=False, help_text="Code disclosure statement found"
                    ),
                ),
                (
                    "disc_coi",
                    models.BooleanField(
                        default=False, help_text="COI disclosure statement found"
                    ),
                ),
                (
                    "disc_fund",
                    models.BooleanField(
                        default=False, help_text="Funding disclosure statement found"
                    ),
                ),
                (
                    "disc_register",
                    models.BooleanField(
                        default=False,
                        help_text="Registration disclosure statement found",
                    ),
                ),
                (
                    "disc_replication",
                    models.BooleanField(
                        blank=True, help_text="Replication disclosure found", null=True
                    ),
                ),
                (
                    "disc_novelty",
                    models.BooleanField(
                        blank=True, help_text="Novelty disclosure found", null=True
                    ),
                ),
                (
                    "transparency_score",
                    models.IntegerField(
                        default=0,
                        help_text="Total transparency score (0-7)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(7),
                        ],
                    ),
                ),
                (
                    "transparency_score_pct",
                    models.FloatField(
                        default=0.0,
                        help_text="Transparency score as percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("assessment_date", models.DateTimeField(blank=True, null=True)),
                (
                    "assessment_tool",
                    models.CharField(default="rtransparent", max_length=50),
                ),
                ("ost_version", models.CharField(default="1.0", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "journal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="papers",
                        to="tracker.journal",
                    ),
                ),
            ],
            options={
                "ordering": ["-pub_year", "title"],
                "indexes": [
                    models.Index(
                        fields=["pub_year"], name="tracker_pap_pub_yea_88ac30_idx"
                    ),
                    models.Index(
                        fields=["journal_title"], name="tracker_pap_journal_f19ec3_idx"
                    ),
                    models.Index(
                        fields=["transparency_score"],
                        name="tracker_pap_transpa_b7fdbe_idx",
                    ),
                    models.Index(
                        fields=["is_open_data"], name="tracker_pap_is_open_2bf8b3_idx"
                    ),
                    models.Index(
                        fields=["is_open_code"], name="tracker_pap_is_open_ec7998_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TransparencyTrend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField(db_index=True)),
                ("month", models.IntegerField(blank=True, null=True)),
                ("total_papers", models.IntegerField(default=0)),
                ("data_sharing_count", models.IntegerField(default=0)),
                ("code_sharing_count", models.IntegerField(default=0)),
                ("coi_disclosure_count", models.IntegerField(default=0)),
                ("funding_disclosure_count", models.IntegerField(default=0)),
                ("protocol_registration_count", models.IntegerField(default=0)),
                ("replication_count", models.IntegerField(default=0)),
                ("novelty_count", models.IntegerField(default=0)),
                ("data_sharing_pct", models.FloatField(default=0.0)),
                ("code_sharing_pct", models.FloatField(default=0.0)),
                ("coi_disclosure_pct", models.FloatField(default=0.0)),
                ("funding_disclosure_pct", models.FloatField(default=0.0)),
                ("protocol_registration_pct", models.FloatField(default=0.0)),
                ("replication_pct", models.FloatField(default=0.0)),
                ("novelty_pct", models.FloatField(default=0.0)),
                ("avg_transparency_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tracker.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["year", "month"],
                "unique_together": {("year", "month", "field")},
            },
        ),
    ]
