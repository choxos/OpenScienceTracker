# Generated by Django 5.2.4 on 2025-07-24 15:24

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Journal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nlm_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                ("title_abbreviation", models.CharField(db_index=True, max_length=200)),
                ("title_full", models.TextField()),
                ("authors", models.TextField(blank=True, null=True)),
                ("publication_start_year", models.IntegerField(blank=True, null=True)),
                ("publication_end_year", models.IntegerField(blank=True, null=True)),
                ("frequency", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "country",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True, db_index=True, max_length=500, null=True
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "issn_electronic",
                    models.CharField(blank=True, max_length=9, null=True),
                ),
                ("issn_print", models.CharField(blank=True, max_length=9, null=True)),
                ("issn_linking", models.CharField(blank=True, max_length=9, null=True)),
                (
                    "indexing_status",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "broad_subject_terms",
                    models.TextField(help_text="Semicolon-separated subject terms"),
                ),
                ("subject_term_count", models.IntegerField(default=1)),
                ("mesh_terms", models.TextField(blank=True, null=True)),
                ("lccn", models.CharField(blank=True, max_length=50, null=True)),
                ("electronic_links", models.URLField(blank=True, null=True)),
                (
                    "publication_types",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["title_abbreviation"],
                "indexes": [
                    models.Index(
                        fields=["country"], name="tracker_jou_country_888804_idx"
                    ),
                    models.Index(
                        fields=["publisher"], name="tracker_jou_publish_665cdf_idx"
                    ),
                    models.Index(
                        fields=["publication_start_year"],
                        name="tracker_jou_publica_fdb2ac_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ResearchField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("total_journals", models.IntegerField(default=0)),
                ("total_papers", models.IntegerField(default=0)),
                ("avg_transparency_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_field",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tracker.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "institution",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("is_researcher", models.BooleanField(default=True)),
                (
                    "orcid",
                    models.CharField(
                        blank=True,
                        help_text="ORCID ID (e.g., 0000-0000-0000-0000)",
                        max_length=19,
                        null=True,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "preferred_fields",
                    models.ManyToManyField(
                        blank=True,
                        related_name="preferred_by_users",
                        to="tracker.researchfield",
                    ),
                ),
                (
                    "research_interests",
                    models.ManyToManyField(blank=True, to="tracker.researchfield"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "epmc_id",
                    models.CharField(
                        db_index=True,
                        help_text="EuropePMC ID (primary key)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        help_text="Data source (e.g., PMC, MED)", max_length=20
                    ),
                ),
                (
                    "pmcid",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="PubMed Central ID",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "pmid",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="PubMed ID",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "doi",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Digital Object Identifier",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("title", models.TextField(help_text="Article title")),
                (
                    "author_string",
                    models.TextField(
                        blank=True, help_text="Author names as string", null=True
                    ),
                ),
                (
                    "journal_title",
                    models.CharField(
                        db_index=True,
                        help_text="Journal title from EuropePMC",
                        max_length=500,
                    ),
                ),
                (
                    "journal_issn",
                    models.CharField(
                        blank=True, help_text="Journal ISSN", max_length=20, null=True
                    ),
                ),
                (
                    "pub_year",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Publication year",
                        null=True,
                    ),
                ),
                (
                    "issue",
                    models.CharField(
                        blank=True, help_text="Journal issue", max_length=50, null=True
                    ),
                ),
                (
                    "journal_volume",
                    models.CharField(
                        blank=True, help_text="Journal volume", max_length=50, null=True
                    ),
                ),
                (
                    "page_info",
                    models.CharField(
                        blank=True,
                        help_text="Page information",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "pub_type",
                    models.CharField(
                        blank=True,
                        help_text="Publication type",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "first_index_date",
                    models.DateField(
                        blank=True, help_text="First index date in EuropePMC", null=True
                    ),
                ),
                (
                    "first_publication_date",
                    models.DateField(
                        blank=True, help_text="First publication date", null=True
                    ),
                ),
                (
                    "is_open_access",
                    models.BooleanField(default=False, help_text="Open access status"),
                ),
                (
                    "in_epmc",
                    models.BooleanField(
                        default=False, help_text="Available in EuropePMC"
                    ),
                ),
                (
                    "in_pmc",
                    models.BooleanField(default=False, help_text="Available in PMC"),
                ),
                (
                    "has_pdf",
                    models.BooleanField(default=False, help_text="PDF available"),
                ),
                (
                    "has_book",
                    models.BooleanField(
                        default=False, help_text="Book chapter available"
                    ),
                ),
                (
                    "has_suppl",
                    models.BooleanField(
                        default=False, help_text="Supplementary material available"
                    ),
                ),
                (
                    "has_references",
                    models.BooleanField(
                        default=False, help_text="References available"
                    ),
                ),
                (
                    "has_text_mined_terms",
                    models.BooleanField(
                        default=False, help_text="Text-mined terms available"
                    ),
                ),
                (
                    "has_db_cross_references",
                    models.BooleanField(
                        default=False, help_text="Database cross-references available"
                    ),
                ),
                (
                    "has_labs_links",
                    models.BooleanField(default=False, help_text="Lab links available"),
                ),
                (
                    "has_tm_accession_numbers",
                    models.BooleanField(
                        default=False,
                        help_text="Text-mined accession numbers available",
                    ),
                ),
                (
                    "cited_by_count",
                    models.IntegerField(
                        default=0, help_text="Citation count from EuropePMC"
                    ),
                ),
                (
                    "is_coi_pred",
                    models.BooleanField(
                        default=False, help_text="Has conflict of interest disclosure"
                    ),
                ),
                (
                    "coi_text",
                    models.TextField(
                        blank=True,
                        help_text="Conflict of interest disclosure text",
                        null=True,
                    ),
                ),
                (
                    "is_fund_pred",
                    models.BooleanField(
                        default=False, help_text="Has funding disclosure"
                    ),
                ),
                (
                    "fund_text",
                    models.TextField(
                        blank=True, help_text="Funding disclosure text", null=True
                    ),
                ),
                (
                    "is_register_pred",
                    models.BooleanField(
                        default=False, help_text="Study was pre-registered"
                    ),
                ),
                (
                    "register_text",
                    models.TextField(
                        blank=True, help_text="Registration statement text", null=True
                    ),
                ),
                (
                    "is_open_data",
                    models.BooleanField(
                        default=False, help_text="Has open data available"
                    ),
                ),
                (
                    "open_data_category",
                    models.CharField(
                        blank=True,
                        help_text="Category of open data",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "open_data_statements",
                    models.TextField(
                        blank=True, help_text="Open data statement text", null=True
                    ),
                ),
                (
                    "is_open_code",
                    models.BooleanField(
                        default=False, help_text="Has open code available"
                    ),
                ),
                (
                    "open_code_statements",
                    models.TextField(
                        blank=True, help_text="Open code statement text", null=True
                    ),
                ),
                (
                    "transparency_score",
                    models.IntegerField(
                        default=0,
                        help_text="Total transparency score (0-6): COI + Funding + Registration + Open Data + Open Code + Open Access",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ],
                    ),
                ),
                (
                    "transparency_score_pct",
                    models.FloatField(
                        default=0.0,
                        help_text="Transparency score as percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "transparency_processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether transparency indicators have been processed",
                    ),
                ),
                (
                    "processing_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when transparency processing was completed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "journal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="papers",
                        to="tracker.journal",
                    ),
                ),
            ],
            options={
                "ordering": ["-pub_year", "title"],
                "indexes": [
                    models.Index(
                        fields=["epmc_id"], name="tracker_pap_epmc_id_e120f2_idx"
                    ),
                    models.Index(fields=["pmid"], name="tracker_pap_pmid_b776de_idx"),
                    models.Index(fields=["pmcid"], name="tracker_pap_pmcid_4e3af5_idx"),
                    models.Index(fields=["doi"], name="tracker_pap_doi_3d0991_idx"),
                    models.Index(
                        fields=["pub_year"], name="tracker_pap_pub_yea_88ac30_idx"
                    ),
                    models.Index(
                        fields=["journal_title"], name="tracker_pap_journal_f19ec3_idx"
                    ),
                    models.Index(
                        fields=["is_open_access"], name="tracker_pap_is_open_ee4dd5_idx"
                    ),
                    models.Index(
                        fields=["transparency_score"],
                        name="tracker_pap_transpa_b7fdbe_idx",
                    ),
                    models.Index(
                        fields=["is_open_data"], name="tracker_pap_is_open_2bf8b3_idx"
                    ),
                    models.Index(
                        fields=["is_open_code"], name="tracker_pap_is_open_ec7998_idx"
                    ),
                    models.Index(
                        fields=["is_coi_pred"], name="tracker_pap_is_coi__b7e9ad_idx"
                    ),
                    models.Index(
                        fields=["is_fund_pred"], name="tracker_pap_is_fund_298441_idx"
                    ),
                    models.Index(
                        fields=["is_register_pred"],
                        name="tracker_pap_is_regi_af2e82_idx",
                    ),
                    models.Index(
                        fields=["transparency_processed"],
                        name="tracker_pap_transpa_b9228f_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TransparencyTrend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField(db_index=True)),
                ("month", models.IntegerField(blank=True, null=True)),
                ("total_papers", models.IntegerField(default=0)),
                ("data_sharing_count", models.IntegerField(default=0)),
                ("code_sharing_count", models.IntegerField(default=0)),
                ("coi_disclosure_count", models.IntegerField(default=0)),
                ("funding_disclosure_count", models.IntegerField(default=0)),
                ("protocol_registration_count", models.IntegerField(default=0)),
                ("replication_count", models.IntegerField(default=0)),
                ("novelty_count", models.IntegerField(default=0)),
                ("data_sharing_pct", models.FloatField(default=0.0)),
                ("code_sharing_pct", models.FloatField(default=0.0)),
                ("coi_disclosure_pct", models.FloatField(default=0.0)),
                ("funding_disclosure_pct", models.FloatField(default=0.0)),
                ("protocol_registration_pct", models.FloatField(default=0.0)),
                ("replication_pct", models.FloatField(default=0.0)),
                ("novelty_pct", models.FloatField(default=0.0)),
                ("avg_transparency_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tracker.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["year", "month"],
                "unique_together": {("year", "month", "field")},
            },
        ),
    ]
