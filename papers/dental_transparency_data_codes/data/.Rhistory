setwd("data/")
db <- read.csv("dental_transparency_db.csv")
results_table_data <- read.csv("dental_transparency_results_data_code.csv")
df <- read.csv("dental_transparency_results_all.csv")
opendata <- merge(db, results_table_data, by = "pmid") %>% merge(df)
library(dplyr)
opendata <- merge(db, results_table_data, by = "pmid") %>% merge(df)
write.csv(opendata, "dental_transparency_opendata.csv")
knitr::opts_knit$set(root.dir = 'C:/Users/ahmad/Google Drive/Meta-Research in Dentistry/FAIRness of COVID-19 data/data/')
pacman::p_load(dplyr,
ggplot2,
knitr)
opendata <- read.csv("covid_transparency_opendata.csv")
pacman::p_load(dplyr,
rtransparent,
metareadr,
europepmc)
ISSNs <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTcoDSEDhtzrYe8u8hkLC9OQ9fZHaQn8cBNZt_7k-qnqtDFP0OCxXPj9aM38D0umO2stdox41C1eZAi/pub?gid=0&single=true&output=csv")
ISSNs <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTcoDSEDhtzrYe8u8hkLC9OQ9fZHaQn8cBNZt_7k-qnqtDFP0OCxXPj9aM38D0umO2stdox41C1eZAi/pub?gid=0&single=true&output=csv")
ISSNs <- ISSNs %>% mutate(search.term = paste0("ISSN:", Primary.ISSN))
ISSNsQuery <- paste(ISSNs$search.term,
collapse = " OR ")
db <- epmc_search(
query = paste0(
"'(",
ISSNsQuery,
") ",
'AND (SRC:"MED")
AND (LANG:"eng" OR LANG:"en" OR LANG:"us")
AND (FIRST_PDATE:[1900-01-01 TO 2021-12-31])
AND ((IN_EPMC:y) OR (OPEN_ACCESS:y))
AND (PUB_TYPE:"Journal Article" OR PUB_TYPE:"research-article" OR PUB_TYPE:"rapid-communication" OR PUB_TYPE:"product-review")',
"'"
),
limit = 100000, , output = "parsed"
)
db <- epmc_search(
query = paste0(
"'(",
ISSNsQuery,
") ",
'AND (SRC:"MED")
AND (LANG:"eng" OR LANG:"en" OR LANG:"us")
AND (FIRST_PDATE:[1900-01-01 TO 2021-12-31])
AND ((IN_EPMC:y) OR (OPEN_ACCESS:y))
AND (PUB_TYPE:"Journal Article" OR PUB_TYPE:"research-article" OR PUB_TYPE:"rapid-communication" OR PUB_TYPE:"product-review")',
"'"
),
limit = 100000, , output = "parsed"
)
knitr::opts_knit$set(root.dir = 'C:/Users/ahmad/Google Drive/Meta-Research in Dentistry/FAIRness of COVID-19 data/data/')
pacman::p_load(dplyr,
ggplot2,
knitr)
opendata <- read.csv("covid_transparency_opendata.csv")
knitr::opts_knit$set(root.dir = 'C:/Users/ahmad/Google Drive/Meta-Research in Dentistry/Data Transparency Project/data/')
opendata <- read.csv("dental_transparency_opendata.csv")
db <- epmc_search(
query = paste0(
"'(",
ISSNsQuery,
") ",
'AND (SRC:"MED")
AND (LANG:"eng" OR LANG:"en" OR LANG:"us")
AND (FIRST_PDATE:[1900-01-01 TO 2021-12-31])
AND (PUB_TYPE:"Journal Article" OR PUB_TYPE:"research-article" OR PUB_TYPE:"rapid-communication" OR PUB_TYPE:"product-review")',
"'"
),
limit = 100000, , output = "parsed"
)
kable(data.frame(hits_all = 329784,
hits_oa = nrow(opendata),
oa_percentage = round((nrow(opendata)/92752)*100, 2)))
library(lubridate)
opendata <- opendata %>%
mutate(year_firstpub = year(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")),
month_firstpub = month(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")
)
)
kable(table(opendata$year_firstpub))
length(table(opendata$journal))
kable(head(table(opendata$journal) %>% as.data.frame() %>% arrange(desc(Freq)), 10))
kable(data.frame(Mean = round(mean(opendata$citedByCount),1),
SD = round(sd(opendata$citedByCount), 2),
Median = median(opendata$citedByCount),
IQR = IQR(opendata$citedByCount)
))
kable(opendata[which.max(opendata$citedByCount),] %>%
select(pmid, pmcid, doi.x, title, authorString, journalTitle, pubYear))
knitr::opts_knit$set(root.dir = 'C:/Users/ahmad/Google Drive/Meta-Research in Dentistry/Data Transparency Project/data/')
pacman::p_load(dplyr,
ggplot2,
knitr)
opendata <- read.csv("dental_transparency_opendata.csv")
kable(data.frame(hits_all = 329784,
hits_oa = nrow(opendata),
oa_percentage = round((nrow(opendata)/92752)*100, 2)))
library(lubridate)
opendata <- opendata %>%
mutate(year_firstpub = year(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")),
month_firstpub = month(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")
)
)
kable(table(opendata$year_firstpub))
length(table(opendata$journal))
kable(head(table(opendata$journal) %>% as.data.frame() %>% arrange(desc(Freq)), 10))
kable(data.frame(Mean = round(mean(opendata$citedByCount),1),
SD = round(sd(opendata$citedByCount), 2),
Median = median(opendata$citedByCount),
IQR = IQR(opendata$citedByCount)
))
kable(opendata[which.max(opendata$citedByCount),] %>%
select(pmid, pmcid, doi.x, title, authorString, journalTitle, pubYear))
kable(data.frame(
number = length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE]),
percentage = round(length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE])/nrow(opendata)*100, 2)
))
library(epiR)
kable(round(epi.prev(pos = length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE]),
tested = nrow(opendata),
se = 0.992,
sp = 0.995)$ap,
2))
kable(round(prop.table(table(opendata$is_coi_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_coi_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE]),
percentage = round(length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE])/nrow(opendata)*100, 2)
))
kable(round(epi.prev(pos = length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE]),
tested = nrow(opendata),
se = 0.997,
sp = 0.981)$ap,
2))
kable(round(prop.table(table(opendata$is_fund_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_fund_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_register_pred[opendata$is_register_pred == TRUE]),
percentage = round(length(opendata$is_register_pred[opendata$is_register_pred == TRUE])/nrow(opendata)*100, 2)
))
kable(round(epi.prev(pos = length(opendata$is_register_pred[opendata$is_register_pred == TRUE]),
tested = nrow(opendata),
se = 0.955,
sp = 0.997)$ap,
2))
kable(round(prop.table(table(opendata$is_register_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_register_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_open_data[opendata$is_open_data == TRUE]),
percentage = round(length(opendata$is_open_data[opendata$is_open_data == TRUE])/nrow(opendata)*100, 2)
))
kable(round(prop.table(table(opendata$is_open_data, opendata$year_firstpub), 2)*100, 1))
kable(data.frame(number = length(opendata$is_open_code[opendata$is_open_code == TRUE]),
percentage = round(length(opendata$is_open_code[opendata$is_open_code == TRUE])/nrow(opendata)*100, 2)
))
kable(round(prop.table(table(opendata$is_open_code, opendata$year_firstpub), 2)*100, 1))
jif <- read.csv("jif_2020.csv")
opendata <- merge(x = opendata,
y = ISSNs[, c("Abbreviation", "X2020.JIF")],
by.x = "journalTitle",
by.y = "Abbreviation",
all.x = TRUE)
sum(is.na(opendata$X2020.JIF))
knitr::opts_knit$set(root.dir = 'C:/Users/ahmad/Google Drive/Meta-Research in Dentistry/Data Transparency Project/data/')
pacman::p_load(dplyr,
ggplot2,
knitr)
opendata <- read.csv("dental_transparency_opendata.csv")
kable(data.frame(hits_all = 329784,
hits_oa = nrow(opendata),
oa_percentage = round((nrow(opendata)/92752)*100, 2)))
library(lubridate)
opendata <- opendata %>%
mutate(year_firstpub = year(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")),
month_firstpub = month(
as.POSIXlt(firstPublicationDate,
format = "%Y-%m-%d")
)
)
kable(table(opendata$year_firstpub))
length(table(opendata$journal))
kable(head(table(opendata$journal) %>% as.data.frame() %>% arrange(desc(Freq)), 10))
kable(data.frame(Mean = round(mean(opendata$citedByCount),1),
SD = round(sd(opendata$citedByCount), 2),
Median = median(opendata$citedByCount),
IQR = IQR(opendata$citedByCount)
))
kable(opendata[which.max(opendata$citedByCount),] %>%
select(pmid, pmcid, doi.x, title, authorString, journalTitle, pubYear))
kable(data.frame(
number = length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE]),
percentage = round(length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE])/nrow(opendata)*100, 2)
))
library(epiR)
kable(round(epi.prev(pos = length(opendata$is_coi_pred[opendata$is_coi_pred == TRUE]),
tested = nrow(opendata),
se = 0.992,
sp = 0.995)$ap,
2))
kable(round(prop.table(table(opendata$is_coi_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_coi_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE]),
percentage = round(length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE])/nrow(opendata)*100, 2)
))
kable(round(epi.prev(pos = length(opendata$is_fund_pred[opendata$is_fund_pred == TRUE]),
tested = nrow(opendata),
se = 0.997,
sp = 0.981)$ap,
2))
kable(round(prop.table(table(opendata$is_fund_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_fund_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_register_pred[opendata$is_register_pred == TRUE]),
percentage = round(length(opendata$is_register_pred[opendata$is_register_pred == TRUE])/nrow(opendata)*100, 2)
))
kable(round(epi.prev(pos = length(opendata$is_register_pred[opendata$is_register_pred == TRUE]),
tested = nrow(opendata),
se = 0.955,
sp = 0.997)$ap,
2))
kable(round(prop.table(table(opendata$is_register_pred, opendata$year_firstpub), 2)*100, 1))
chisq.test(opendata$is_register_pred, opendata$year_firstpub)
kable(data.frame(number = length(opendata$is_open_data[opendata$is_open_data == TRUE]),
percentage = round(length(opendata$is_open_data[opendata$is_open_data == TRUE])/nrow(opendata)*100, 2)
))
kable(round(prop.table(table(opendata$is_open_data, opendata$year_firstpub), 2)*100, 1))
kable(data.frame(number = length(opendata$is_open_code[opendata$is_open_code == TRUE]),
percentage = round(length(opendata$is_open_code[opendata$is_open_code == TRUE])/nrow(opendata)*100, 2)
))
kable(round(prop.table(table(opendata$is_open_code, opendata$year_firstpub), 2)*100, 1))
opendata <- merge(x = opendata,
y = ISSNs[, c("Abbreviation", "X2020.JIF")],
by.x = "journalTitle",
by.y = "Abbreviation",
all.x = TRUE)
sum(is.na(opendata$X2020.JIF))
kable(opendata %>%
group_by(is_coi_pred) %>%
summarise(Mean = round(mean(X2020.JIF, na.rm = T),3),
SD = round(sd(X2020.JIF, na.rm = T),4),
Median = median(X2020.JIF, na.rm = T),
IQR = IQR(X2020.JIF, na.rm = T)))
set.seed(10)
with(opendata, shapiro.test(sample(X2020.JIF[is_coi_pred == TRUE], 5000)))
with(opendata, shapiro.test(X2020.JIF[is_coi_pred == FALSE]))
wilcox.test(X2020.JIF~is_coi_pred, data = opendata, exact = FALSE)
kable(opendata %>%
group_by(is_fund_pred) %>%
summarise(Mean = round(mean(X2020.JIF, na.rm = T), 3),
SD = round(sd(X2020.JIF, na.rm = T), 4),
Median = median(X2020.JIF, na.rm = T),
IQR = IQR(X2020.JIF, na.rm = T)))
set.seed(10)
with(opendata, shapiro.test(sample(X2020.JIF[is_fund_pred == TRUE], 5000)))
with(opendata, shapiro.test(X2020.JIF[is_fund_pred == FALSE]))
wilcox.test(X2020.JIF~is_fund_pred, data = opendata, exact = FALSE)
kable(opendata %>%
group_by(is_register_pred) %>%
summarise(Mean = round(mean(X2020.JIF, na.rm = T), 3),
SD = round(sd(X2020.JIF, na.rm = T), 4),
Median = median(X2020.JIF, na.rm = T),
IQR = IQR(X2020.JIF, na.rm = T)))
set.seed(10)
with(opendata, shapiro.test(X2020.JIF[is_register_pred == TRUE]))
with(opendata, shapiro.test(sample(X2020.JIF[is_register_pred == FALSE], 5000)))
wilcox.test(X2020.JIF~is_register_pred, data = opendata, exact = FALSE)
summarybyMonth <- opendata %>%
group_by(month_firstpub, year_firstpub) %>%
summarise(counts = n(),
coi_true = sum(is_coi_pred == TRUE),
fund_true = sum(is_fund_pred == TRUE),
reg_true = sum(is_register_pred == TRUE))
summarybyMonth %>%
ggplot(aes(x = month_firstpub, y = counts)) +
geom_col(position = position_dodge()) +
facet_grid(year_firstpub ~ .) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Month", limits = 1:12, labels = 1:12)
coi_summarybyMonth <- opendata %>%
group_by(month_firstpub, year_firstpub, is_coi_pred) %>%
summarise(counts = n())
coi_plot <- coi_summarybyMonth %>%
ggplot(aes(x = month_firstpub, y = counts, fill = is_coi_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Month", limits = 1:12, labels = 1:12) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Conflict of Interest disclosure")
fund_summarybyMonth <- opendata %>%
group_by(month_firstpub, year_firstpub, is_fund_pred) %>%
summarise(counts = n())
fund_plot <- fund_summarybyMonth %>%
ggplot(aes(x = month_firstpub, y = counts, fill = is_fund_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Month", limits = 1:12, labels = 1:12) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Funding statement")
reg_summarybyMonth <- opendata %>%
group_by(month_firstpub, year_firstpub, is_register_pred) %>%
summarise(counts = n())
reg_plot <- reg_summarybyMonth %>%
ggplot(aes(x = month_firstpub, y = counts, fill = is_register_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Month", limits = 1:12, labels = 1:12) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Registration statement")
library(ggpubr)
figure <- ggarrange(coi_plot + rremove("xlab") + theme(axis.text.x=element_blank()),
fund_plot + rremove("xlab") + theme(axis.text.x=element_blank(), strip.text.x = element_blank()),
reg_plot + theme(strip.text.x = element_blank()),
ncol = 1, nrow = 3, vjust = 1,
align = "hv", common.legend = T, legend = "right")
# tiff("Figure.tiff", width = 6, height = 7, units = "in", res = 300)
figure
#dev.off()
coi_plot <- opendata %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_coi_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Conflict of Interest disclosure")
coi_plot
summarybyYear <- opendata %>%
group_by(year) %>%
summarise(counts = n(),
coi_true = sum(is_coi_pred == TRUE),
fund_true = sum(is_fund_pred == TRUE),
reg_true = sum(is_register_pred == TRUE))
summarybyYear <- opendata %>%
group_by(firstpub_year) %>%
summarise(counts = n(),
coi_true = sum(is_coi_pred == TRUE),
fund_true = sum(is_fund_pred == TRUE),
reg_true = sum(is_register_pred == TRUE))
summarybyYear <- opendata %>%
group_by(year_firstpub) %>%
summarise(counts = n(),
coi_true = sum(is_coi_pred == TRUE),
fund_true = sum(is_fund_pred == TRUE),
reg_true = sum(is_register_pred == TRUE))
View(summarybyYear)
summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts)) +
geom_col(position = position_dodge()) +
facet_grid(year ~ .) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year")
summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year")
coi_summarybyYear <- opendata %>%
group_by(year_firstpub, is_coi_pred) %>%
summarise(counts = n())
coi_plot <- opendata %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_coi_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
guides(x =  guide_axis(angle = 45)) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Conflict of Interest disclosure")
coi_plot
coi_plot <- coi_summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_coi_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
guides(x =  guide_axis(angle = 45)) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Conflict of Interest disclosure")
coi_plot
fund_summarybyYear <- opendata %>%
group_by(year_firstpub, is_fund_pred) %>%
summarise(counts = n())
fund_plot <- fund_summarybyMonth %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_fund_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year", limits = 1:12, labels = 1:12) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Funding statement")
fund_plot
fund_plot <- fund_summarybyMonth %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_fund_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Funding statement")
fund_plot
fund_plot <- fund_summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_fund_pred)) +
geom_col(position = position_dodge()) +
facet_grid(. ~ year_firstpub) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Funding statement")
fund_plot
fund_plot <- fund_summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_fund_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
guides(x =  guide_axis(angle = 45)) +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Funding statement")
fund_plot
reg_plot <- reg_summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_register_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Registration statement")
reg_summarybyYear <- opendata %>%
group_by(year_firstpub, is_register_pred) %>%
summarise(counts = n())
reg_plot <- reg_summarybyYear %>%
ggplot(aes(x = year_firstpub, y = counts, fill = is_register_pred)) +
geom_col(position = position_dodge()) +
geom_bar(stat = "identity") +
scale_x_discrete(name="Year") +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(title = "Registration statement")
library(ggpubr)
figure <- ggarrange(coi_plot + rremove("xlab") + theme(axis.text.x=element_blank()),
fund_plot + rremove("xlab") + theme(axis.text.x=element_blank(), strip.text.x = element_blank()),
reg_plot + theme(strip.text.x = element_blank()),
ncol = 1, nrow = 3, vjust = 1,
align = "hv", common.legend = T, legend = "right")
# tiff("Figure.tiff", width = 6, height = 7, units = "in", res = 300)
figure
tiff("Figure.tiff", width = 6, height = 7, units = "in", res = 300)
figure
dev.off()
